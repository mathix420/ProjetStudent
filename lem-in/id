./libft/ft_abs.c:	return (nb > 0 ? nb : -nb);
./libft/ft_atoi.c:	if (str[i] == '-' || str[i] == '+')
./libft/ft_atoi.c:		sign = (str[i++] == '-' ? -1 : 1);
./libft/ft_atoi.c:		out = (out * 10) + (str[i++] - '0');
./libft/ft_atoi.c:		return ((sign == 1) ? -1 : 0);
./libft/ft_bzero.c:		n--;
./libft/ft_itoa.c:	nb = (n < 0 ? -n : n);
./libft/ft_itoa.c:		str[i] = '-';
./libft/ft_lstadd.c:	new->next = *alst;
./libft/ft_lstdel.c:		tmp = (*alst)->next;
./libft/ft_lstdel.c:		del((*alst)->content, (*alst)->content_size);
./libft/ft_lstdelone.c:	(*del)((*alst)->content, (*alst)->content_size);
./libft/ft_lstiter.c:		lst = lst->next;
./libft/ft_lstlen.c:		lst = lst->next;
./libft/ft_lstmap.c:	if (!(new = ft_lstnew(tmp->content, tmp->content_size)))
./libft/ft_lstmap.c:	lst = lst->next;
./libft/ft_lstmap.c:		if (!(new->next = ft_lstnew(tmp->content, tmp->content_size)))
./libft/ft_lstmap.c:		new = new->next;
./libft/ft_lstmap.c:		lst = lst->next;
./libft/ft_lstnew.c:		node->content = NULL;
./libft/ft_lstnew.c:		node->content_size = 0;
./libft/ft_lstnew.c:		if ((node->content = malloc(content_size)) == NULL)
./libft/ft_lstnew.c:		ft_memcpy(node->content, content, content_size);
./libft/ft_lstnew.c:		node->content_size = content_size;
./libft/ft_lstnew.c:	node->next = NULL;
./libft/ft_memchr.c:	while (n--)
./libft/ft_memcmp.c:	while (n-- && *(unsigned char *)s1 == *(unsigned char *)s2)
./libft/ft_memcmp.c:		return (*(unsigned char *)s1 - *(unsigned char *)s2);
./libft/ft_memmove.c:		while ((size_t)(dst - in) < len)
./libft/ft_memmove.c:		while (len-- > 0)
./libft/ft_memset.c:		len--;
./libft/ft_nblen.c:	nb = (n < 0 ? -n : n);
./libft/ft_putnbr.c:		ft_putchar('-');
./libft/ft_putnbr.c:	nbr = (n < 0) ? -n : n;
./libft/ft_putnbr_fd.c:		ft_putchar_fd('-', fd);
./libft/ft_putnbr_fd.c:	nbr = (n < 0) ? -n : n;
./libft/ft_strcmp.c:		return (*(unsigned char *)s1 - *(unsigned char *)s2);
./libft/ft_strlcat.c:	while (len_dst + i < size - 1 && src[i])
./libft/ft_strncmp.c:	while (*s1 && *s2 && *(unsigned char *)s1 == *(unsigned char *)s2 && n--)
./libft/ft_strncmp.c:		return (*(unsigned char *)s1 - *(unsigned char *)s2);
./libft/ft_strnstr.c:			if (needle[j] == '\0' && haystack[i + j - 1] == needle[j - 1])
./libft/ft_strrev.c:	i = ft_strlen(s) - 1;
./libft/ft_strrev.c:		i--;
./libft/ft_strstr.c:			if (needle[j] == '\0' && haystack[i + j - 1] == needle[j - 1])
./libft/ft_strtrim.c:	j = ft_strlen(s) - 1;
./libft/ft_strtrim.c:		j--;
./libft/ft_strtrim.c:	return (ft_strsub(s, i, j - i + 1));
./libft/ft_toupper.c:	return ((c >= 97 && c <= 122) ? (c - 32) : c);
./libft/get_next_line.c:	file->next = NULL;
./libft/get_next_line.c:	file->fd = fd;
./libft/get_next_line.c:	file->sav = NULL;
./libft/get_next_line.c:		if (file->fd == fd)
./libft/get_next_line.c:		else if (file->next)
./libft/get_next_line.c:			return (ft_gocfile(file->next, fd));
./libft/get_next_line.c:		file->next = ft_newfile(fd);
./libft/get_next_line.c:		return (file->next);
./libft/get_next_line.c:	while (last->fd != fd && last->next && last->next->fd != fd)
./libft/get_next_line.c:		last = last->next;
./libft/get_next_line.c:	tofree = last->fd == fd ? last : last->next;
./libft/get_next_line.c:	if (last->fd == fd)
./libft/get_next_line.c:		*file = tofree->next;
./libft/get_next_line.c:		last->next = tofree->next;
./libft/get_next_line.c:	ft_strdel(&(tofree->sav));
./libft/get_next_line.c:		return (-1);
./libft/get_next_line.c:	if (!current || (!(current->sav) && !(current->sav = ft_strnew(0))) ||
./libft/get_next_line.c:		return (-1);
./libft/get_next_line.c:	while (!(r = 0) && !ft_strchr(current->sav, 10) && !ft_strchr(buffer, 10)
./libft/get_next_line.c:		tmp = current->sav;
./libft/get_next_line.c:		current->sav = ft_strjoin(current->sav, buffer);
./libft/get_next_line.c:	if (r < 0 || (r == 0 && (!(current->sav) || !(current->sav)[0])))
./libft/get_next_line.c:		return (ft_delelem(&file, fd, r < 0 ? -1 : 0));
./libft/get_next_line.c:	return (ft_treat(&(current->sav), line));
./srcs/check.c:	if (!e->info.start || !e->info.end)
./srcs/check.c:	while (e->info.start[i] && e->info.start[i] != ' ')
./srcs/check.c:	while (e->info.end[j] && e->info.end[j] != ' ')
./srcs/check.c:		if (!ft_strncmp(e->info.start, e->info.end, i))
./srcs/check.c://	if (!e->info.nb_room)
./srcs/check.c:	i = -1;
./srcs/check.c:		e->info.nb_ant = e->info.nb_ant * 10 + (line[i++] - 48);
./srcs/check.c:	if (e->info.nb_ant <= 0)
./srcs/init.c:	e->error = 0;
./srcs/init.c:	e->room = NULL;
./srcs/init.c:	e->tube = NULL;
./srcs/init.c:	e->solve = NULL;
./srcs/init.c:	e->info.nb_ant = 0;
./srcs/init.c:	e->info.nb_room = 0;
./srcs/init.c:	e->info.nb_link = 0;
./srcs/init.c:	e->info.comment = NULL;
./srcs/init.c:	e->info.start_id = -1;
./srcs/init.c:	e->info.end_id = -1;
./srcs/init.c:	e->info.start = NULL;
./srcs/init.c:	e->info.end = NULL;
./srcs/init.c:		tmp->id = i;
./srcs/init.c:		tmp->ant = 0;
./srcs/init.c:		tmp = tmp->next;
./srcs/link.c:	e->info.nb_link++;
./srcs/link.c:	e->tab[addr1->id][addr2->id] = addr2;
./srcs/link.c:	e->tab[addr2->id][addr1->id] = addr1;
./srcs/link.c:	t2 = e->tube;
./srcs/link.c:		t1 = e->room;
./srcs/link.c:		while (t2->link[i[0]] && t2->link[i[0]] != '-')
./srcs/link.c:			if (!ft_strncmp(t2->link, t1->name, i[0]) && t1->name[i[0]] == ' ')
./srcs/link.c:			i[1] = ft_strlen(t2->link) - i[0] - 1;
./srcs/link.c:			if (!ft_strncmp(&t2->link[i[0] + 1], t1->name, i[1]))
./srcs/link.c:			t1 = t1->next;
./srcs/link.c:		t2 = t2->next;
./srcs/link.c:	i = -1;
./srcs/link.c:	if (!(e->tab = (void ***)malloc(sizeof(void **) * e->info.nb_room)))
./srcs/link.c:	while (++i < e->info.nb_room)
./srcs/link.c:		j = -1;
./srcs/link.c:		if (!(e->tab[i] = (void **)malloc(sizeof(void *) * e->info.nb_room)))
./srcs/link.c:				free(e->tab[i--]);
./srcs/link.c:			free(e->tab);
./srcs/link.c:		while (++j < e->info.nb_room)
./srcs/link.c:			e->tab[i][j] = NULL;
./srcs/lst.c:	new->link = line;
./srcs/lst.c:	new->next = e->tube;
./srcs/lst.c:	e->tube = new;
./srcs/lst.c:	tmp = e->room;
./srcs/lst.c:	if (!e->room)
./srcs/lst.c:		if (!ft_strncmp(tmp->name, line, i))
./srcs/lst.c:		tmp = tmp->next;
./srcs/lst.c:	tmp = e->room;
./srcs/lst.c:	while (e->info.end[i] && e->info.end[i] != ' ')
./srcs/lst.c:	while (tmp->next)
./srcs/lst.c:		if (!ft_strncmp(tmp->next->name, e->info.end, i))
./srcs/lst.c:			tmp->next = tmp->next->next;
./srcs/lst.c:			e->info.nb_room--;
./srcs/lst.c:		tmp = tmp->next;
./srcs/lst.c:	e->info.nb_room++;
./srcs/lst.c:	new->name = e->info.end;
./srcs/lst.c:	new->next = NULL;
./srcs/lst.c:	tmp->next = new;
./srcs/lst.c:	e->info.end_id = new->id;
./srcs/lst.c:	tmp = e->room;
./srcs/lst.c:	while (e->info.start[i] && e->info.start[i] != ' ')
./srcs/lst.c:	while (tmp->next)
./srcs/lst.c:		if (!ft_strncmp(tmp->next->name, e->info.start, i))
./srcs/lst.c:			tmp->next = tmp->next->next;
./srcs/lst.c:			e->info.nb_room--;
./srcs/lst.c:		tmp = tmp->next;
./srcs/lst.c:	e->info.nb_room++;
./srcs/lst.c:	new->name = e->info.start;
./srcs/lst.c:	new->next = e->room;
./srcs/lst.c:	e->info.start_id = new->id;
./srcs/lst.c:	e->room = new;
./srcs/lst.c:	if (e->info.nb_link)
./srcs/lst.c:		tmp->name = line;
./srcs/lst.c:	e->info.nb_room++;
./srcs/lst.c:	new->name = line;
./srcs/lst.c:	new->next = e->room;
./srcs/lst.c:	e->room = new;
./srcs/main.c:	y = -1;
./srcs/main.c:	x = -1;
./srcs/print.c:	tmp = e->room;
./srcs/print.c:		printf("room = %s\n", tmp->name);
./srcs/print.c:		printf("id = %d\n", tmp->id);
./srcs/print.c:		printf("ant = %d\n", tmp->ant);
./srcs/print.c:		tmp = tmp->next;
./srcs/print.c:	i = -1;
./srcs/print.c:			printf("%c : ", ((t_room *)tab[j][i])->name[0]);
./srcs/print.c:		j = -1;
./srcs/print.c:				printf("%-2c", ((t_room *)tab[i][j])->name[0]);
./srcs/sort_input.c:		e->info.start_id = -2;
./srcs/sort_input.c:		e->info.end_id = -2;
./srcs/sort_input.c:	if (e->tube)
./srcs/sort_input.c:	else if (e->info.space == 2 && !e->info.dash && e->info.start_id == -2)
./srcs/sort_input.c:		e->info.start = line;
./srcs/sort_input.c:		e->info.start_id = -1;
./srcs/sort_input.c:	else if (e->info.space == 2 && !e->info.dash && e->info.end_id == -2)
./srcs/sort_input.c:		e->info.end = line;
./srcs/sort_input.c:		e->info.end_id = -1;
./srcs/sort_input.c:	i = -1;
./srcs/sort_input.c:	e->info.dash = 0;
./srcs/sort_input.c:	e->info.space = 0;
./srcs/sort_input.c:		(line[i] == '-') ? e->info.dash++ : 1;
./srcs/sort_input.c:		(line[i] == ' ') ? e->info.space++ : 1;
./srcs/sort_input.c:	else if (e->info.space == 2 && !e->info.dash)
./srcs/sort_input.c:			e->error = 1;
./srcs/sort_input.c:	else if (e->info.dash == 1 && !e->info.space)
./srcs/sort_input.c:		e->error = 1;
./srcs/sort_input.c:		if (!ft_strlen(line) || e->error)
./srcs/sort_input.c:	init_id(e->room);
./srcs/sort_input.c:	(!e->info.nb_link) ? ft_exit(1) : 1;
./srcs/sort_input.c:	free(e->tube);
./srcs/way.c:	tmp1 = e->solve;
./srcs/way.c:		tmp2 = tmp1->path;
./srcs/way.c:		printf("tmp1->nb = %d\n", tmp1->nb);
./srcs/way.c:		printf("e->solve->path->round = %d\n", tmp1->path->round);
./srcs/way.c:			if (tmp2->room)
./srcs/way.c:				printf("way->room = %s\n", tmp2->room->name);			
./srcs/way.c:			tmp2 = tmp2->next;
./srcs/way.c:		tmp1 = tmp1->next;
./srcs/way.c:	way->room = addr;
./srcs/way.c:	way->round = 0;
./srcs/way.c:	way->next = NULL;
./srcs/way.c:	tmp->path = way;
./srcs/way.c:	tmp->nb = way->room->id;
./srcs/way.c:	tmp->next = e->solve;
./srcs/way.c:	e->solve = tmp;
./srcs/way.c:	test = tmp->path;
./srcs/way.c:	if (test->room->id == 4)
./srcs/way.c:		if (test->room == ptr)
./srcs/way.c:		test = test->next;
./srcs/way.c:	new->room = ptr;
./srcs/way.c:	new->next = tmp->path;
./srcs/way.c:	new->round = tmp->path->round + 1;
./srcs/way.c:	tmp->path = new;
./srcs/way.c:	tmp->nb = ptr->id;
./srcs/way.c:		if (tmp->nb == e->info.nb_room - 1)
./srcs/way.c:		tmp = tmp->next;
./srcs/way.c:	ptr_path = ptr->path->next;
./srcs/way.c:	ptr_solve->nb = ptr->nb;
./srcs/way.c:			ptr_solve->path = cpy;
./srcs/way.c:			tmp->next = cpy;
./srcs/way.c:		cpy->room = ptr_path->room;
./srcs/way.c:		cpy->round = ptr_path->round;
./srcs/way.c:		ptr_path = ptr_path->next;
./srcs/way.c:	tmp1 = e->solve;
./srcs/way.c:	while (tmp1->next)
./srcs/way.c:		tmp1 = tmp1->next;
./srcs/way.c:	ptr_solve->next = NULL;
./srcs/way.c:	tmp1->next = ptr_solve;
./srcs/way.c:	return (tmp1->next);
./srcs/way.c:    tmp = e->solve;
./srcs/way.c:        if (tmp->next->nb == ptr->nb || tmp == ptr)
./srcs/way.c:            tmp->next = ptr->next;
./srcs/way.c:        tmp = tmp->next;
./srcs/way.c:		if (test->id == way->room->id)
./srcs/way.c:		way = way->next;
./srcs/way.c:	new->room = ptr;
./srcs/way.c:	new->next = tmp->path;
./srcs/way.c:	new->round = tmp->path->round + 1;
./srcs/way.c:	tmp->nb = ptr->id;
./srcs/way.c:	tmp->path = new;
./srcs/way.c:	x = -1;
./srcs/way.c:	y = group->nb;
./srcs/way.c:	if (y == e->info.end_id)
./srcs/way.c:	while (++x < e->info.nb_room)
./srcs/way.c:		if (e->tab[y][x] && !in_path(group->path, e->tab[y][x]))
./srcs/way.c:			if (first && first--)
./srcs/way.c:				add_room(e->tab[y][x], group);
./srcs/way.c:				add_room(e->tab[y][x], tmp);
./srcs/way.c:	create_lst(e, e->room);
./srcs/way.c:	tmp = e->solve;
./srcs/way.c:		tmp = tmp->next;
